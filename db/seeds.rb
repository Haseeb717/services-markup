# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)
# Booking.destroy_all if Rails.env.development?
# Review.destroy_all if Rails.env.development?
# Service.destroy_all if Rails.env.development?
# User.destroy_all if Rails.env.development?

# # image_array = ["images/adult-art-asia-1498273.jpg", "images/alphabet-class-conceptual-301926.jpg",
# #   "images/banner-home.jpg", "images/banter-snaps-2DIjQL_e6hQ-unsplash.jpg",
# #   "images/mihai-surdu-8H9ph_Jp3hA-unsplash.jpg", "images/trung-thanh-LgdDeuBcgIY-unsplash.jpg"
# # ]
# require "open-uri"
# puts "started creating sample"

# user_1 = User.new(first_name: "Geoff",
# last_name: "Wu",
# email: 'test@gmail.com', password: '123123', user_name: 'gwff')
# user_1.avatar.attach(io: File.open('app/assets/images/doug.jpg'), filename: 'seed_user_img.jpg', content_type: 'image/jpg')
# user_1.save!

# user_2 = User.new(first_name: "Sean",
# last_name: "Liu",
# email: 'syliu1998@gmail.com', password: '123123', user_name: 'seanTheplug')
# user_2.avatar.attach(io: File.open('app/assets/images/doug.jpg'), filename: 'seed_user_img.jpg', content_type: 'image/jpg')
# user_2.save!

# 10.times do
#   user = User.new(first_name: Faker::FunnyName.two_word_name.split(' ')[0],
#   last_name: Faker::FunnyName.two_word_name.split(' ')[1],
#   email: Faker::Internet.email, password: '123123')
#   user.avatar.attach(io: File.open('app/assets/images/doug.jpg'), filename: 'seed_user_img.jpg', content_type: 'image/jpg')
#   user.save!
# end

# service_type_seed = ["Eat & Drink", "Hotels", "Shops", "Nightlife", "Events", "Airport Pickup", "Travel arrangement"]
# country_seed = [
#   "Afghanistan",
#   "Albania",
#   "Algeria",
#   "American Samoa",
#   "Andorra",
#   "Angola",
#   "Anguilla",
#   "Antarctica",
#   "Antigua and Barbuda",
#   "Argentina",
#   "Armenia",
#   "Aruba",
#   "Australia",
#   "Austria",
#   "Azerbaijan",
#   "Bahamas (the)",
#   "Bahrain",
#   "Bangladesh",
#   "Barbados",
#   "Belarus",
#   "Belgium",
#   "Belize",
#   "Benin",
#   "Bermuda",
#   "Bhutan",
#   "Bolivia (Plurinational State of)",
#   "Bonaire, Sint Eustatius and Saba",
#   "Bosnia and Herzegovina",
#   "Botswana",
#   "Bouvet Island",
#   "Brazil",
#   "British Indian Ocean Territory (the)",
#   "Brunei Darussalam",
#   "Bulgaria",
#   "Burkina Faso",
#   "Burundi",
#   "Cabo Verde",
#   "Cambodia",
#   "Cameroon",
#   "Canada",
#   "Cayman Islands (the)",
#   "Central African Republic (the)",
#   "Chad",
#   "Chile",
#   "China",
#   "Christmas Island",
#   "Cocos (Keeling) Islands (the)",
#   "Colombia",
#   "Comoros (the)",
#   "Congo (the Democratic Republic of the)",
#   "Congo (the)",
#   "Cook Islands (the)",
#   "Costa Rica",
#   "Croatia",
#   "Cuba",
#   "Curaçao",
#   "Cyprus",
#   "Czechia",
#   "Côte d'Ivoire",
#   "Denmark",
#   "Djibouti",
#   "Dominica",
#   "Dominican Republic (the)",
#   "Ecuador",
#   "Egypt",
#   "El Salvador",
#   "Equatorial Guinea",
#   "Eritrea",
#   "Estonia",
#   "Eswatini",
#   "Ethiopia",
#   "Falkland Islands (the) [Malvinas]",
#   "Faroe Islands (the)",
#   "Fiji",
#   "Finland",
#   "France",
#   "French Guiana",
#   "French Polynesia",
#   "French Southern Territories (the)",
#   "Gabon",
#   "Gambia (the)",
#   "Georgia",
#   "Germany",
#   "Ghana",
#   "Gibraltar",
#   "Greece",
#   "Greenland",
#   "Grenada",
#   "Guadeloupe",
#   "Guam",
#   "Guatemala",
#   "Guernsey",
#   "Guinea",
#   "Guinea-Bissau",
#   "Guyana",
#   "Haiti",
#   "Heard Island and McDonald Islands",
#   "Holy See (the)",
#   "Honduras",
#   "Hong Kong",
#   "Hungary",
#   "Iceland",
#   "India",
#   "Indonesia",
#   "Iran (Islamic Republic of)",
#   "Iraq",
#   "Ireland",
#   "Isle of Man",
#   "Israel",
#   "Italy",
#   "Jamaica",
#   "Japan",
#   "Jersey",
#   "Jordan",
#   "Kazakhstan",
#   "Kenya",
#   "Kiribati",
#   "Korea (the Democratic People's Republic of)",
#   "Korea (the Republic of)",
#   "Kuwait",
#   "Kyrgyzstan",
#   "Lao People's Democratic Republic (the)",
#   "Latvia",
#   "Lebanon",
#   "Lesotho",
#   "Liberia",
#   "Libya",
#   "Liechtenstein",
#   "Lithuania",
#   "Luxembourg",
#   "Macao",
#   "Madagascar",
#   "Malawi",
#   "Malaysia",
#   "Maldives",
#   "Mali",
#   "Malta",
#   "Marshall Islands (the)",
#   "Martinique",
#   "Mauritania",
#   "Mauritius",
#   "Mayotte",
#   "Mexico",
#   "Micronesia (Federated States of)",
#   "Moldova (the Republic of)",
#   "Monaco",
#   "Mongolia",
#   "Montenegro",
#   "Montserrat",
#   "Morocco",
#   "Mozambique",
#   "Myanmar",
#   "Namibia",
#   "Nauru",
#   "Nepal",
#   "Netherlands (the)",
#   "New Caledonia",
#   "New Zealand",
#   "Nicaragua",
#   "Niger (the)",
#   "Nigeria",
#   "Niue",
#   "Norfolk Island",
#   "Northern Mariana Islands (the)",
#   "Norway",
#   "Oman",
#   "Pakistan",
#   "Palau",
#   "Palestine, State of",
#   "Panama",
#   "Papua New Guinea",
#   "Paraguay",
#   "Peru",
#   "Philippines (the)",
#   "Pitcairn",
#   "Poland",
#   "Portugal",
#   "Puerto Rico",
#   "Qatar",
#   "Republic of North Macedonia",
#   "Romania",
#   "Russian Federation (the)",
#   "Rwanda",
#   "Réunion",
#   "Saint Barthélemy",
#   "Saint Helena, Ascension and Tristan da Cunha",
#   "Saint Kitts and Nevis",
#   "Saint Lucia",
#   "Saint Martin (French part)",
#   "Saint Pierre and Miquelon",
#   "Saint Vincent and the Grenadines",
#   "Samoa",
#   "San Marino",
#   "Sao Tome and Principe",
#   "Saudi Arabia",
#   "Senegal",
#   "Serbia",
#   "Seychelles",
#   "Sierra Leone",
#   "Singapore",
#   "Sint Maarten (Dutch part)",
#   "Slovakia",
#   "Slovenia",
#   "Solomon Islands",
#   "Somalia",
#   "South Africa",
#   "South Georgia and the South Sandwich Islands",
#   "South Sudan",
#   "Spain",
#   "Sri Lanka",
#   "Sudan (the)",
#   "Suriname",
#   "Svalbard and Jan Mayen",
#   "Sweden",
#   "Switzerland",
#   "Syrian Arab Republic",
#   "Taiwan",
#   "Tajikistan",
#   "Tanzania, United Republic of",
#   "Thailand",
#   "Timor-Leste",
#   "Togo",
#   "Tokelau",
#   "Tonga",
#   "Trinidad and Tobago",
#   "Tunisia",
#   "Turkey",
#   "Turkmenistan",
#   "Turks and Caicos Islands (the)",
#   "Tuvalu",
#   "Uganda",
#   "Ukraine",
#   "United Arab Emirates (the)",
#   "United Kingdom of Great Britain and Northern Ireland (the)",
#   "United States Minor Outlying Islands (the)",
#   "United States of America (the)",
#   "Uruguay",
#   "Uzbekistan",
#   "Vanuatu",
#   "Venezuela (Bolivarian Republic of)",
#   "Viet Nam",
#   "Virgin Islands (British)",
#   "Virgin Islands (U.S.)",
#   "Wallis and Futuna",
#   "Western Sahara",
#   "Yemen",
#   "Zambia",
#   "Zimbabwe",
#   "Åland Islands"]


# 10.times do
#   service = Service.new(name: ["setting dinner reservations", "researching travel arrangements", "Personal trainers", "informational requests", "Hotel bookings", "Airpoet pickup", "Visa application service"].sample, location: ["Tokyo", "Osaka", "Nagoya", "New York", "Chicago", "Taipei", "Hong Kong"].sample, description:
#   Faker::Restaurant.description,
# rate: [1000, 2000, 3000, 4000, 5000].sample)
#   service.user = User.all.sample
#   service.photo.attach(io: URI.open('http://hokkaidotransfers.com/wp-content/uploads/2017/06/concierge-services-870x580.jpg'), filename: 'seed_img.jpg', content_type: 'image/jpg')
#   service.save!
#   # service.service_type_list.add(service_type_seed.sample)
#   # service.country_list.add(country_seed.sample)
# end

# 10.times do
#   booking = Booking.new(date: rand(1.years).seconds.from_now, status: ["confirmed", "cancel", "pending"].sample)
#   booking.user = User.all.sample
#   booking.service = Service.all.sample
#   booking.cost = booking.service.rate
#   booking.date = Date.today+rand(365)
#   booking.save!
# end

# puts "finished creating sample"